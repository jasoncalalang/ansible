---
- name: Prepare and mount volumes
  hosts: all
  become: true
  vars:
    volumes:
      - device: "/dev/vdd"
        partition: "1"
        mount_point: "/home"
        filesystem: "ext4"
        opts: "defaults,nodev"
      - device: "/dev/vdd"
        partition: "2"
        mount_point: "/tmp"
        filesystem: "ext4"
        opts: "defaults"
      - device: "/dev/vdd"
        partition: "3"
        mount_point: "/var"
        filesystem: "ext4"
        opts: "defaults"
      - device: "/dev/vdd"
        partition: "4"
        mount_point: "/var/log"
        filesystem: "ext4"
        opts: "defaults"
      - device: "/dev/vdd"
        partition: "5"
        mount_point: "/var/log/audit"
        filesystem: "ext4"
        opts: "defaults"
      - device: "/dev/vdd"
        partition: "6"
        mount_point: "/var/tmp"
        filesystem: "ext4"
        opts: "defaults,nodev,nosuid,noexec"
      - device: "/dev/vdd"
        partition: "7"
        mount_point: "/dev/shm"
        filesystem: "tmpfs"
        opts: "defaults,nodev,nosuid,noexec"

  tasks:
    - name: Ensure the mount point directory exists
      file:
        path: "{{ item.mount_point }}"
        state: directory
        owner: root
        group: root
        mode: "0755"
      with_items: "{{ volumes }}"

    - name: Create partitions if not already partitioned
      shell: |
        (echo n; echo p; echo {{ item.partition }}; echo ; echo +10G; echo w) | fdisk {{ item.device }}
      args:
        executable: /bin/bash
      when: item.filesystem != "tmpfs"
      with_items: "{{ volumes }}"
      register: partition_result
      failed_when: false

    - name: Format the partition if not already formatted
      filesystem:
        dev: "{{ item.device }}{{ item.partition }}"
        fstype: "{{ item.filesystem }}"
      when: item.filesystem != "tmpfs"
      with_items: "{{ volumes }}"
      register: format_result
      failed_when: false

    - name: Mount the volume (force overwrite existing mount point)
      mount:
        path: "{{ item.mount_point }}"
        src: "{{ item.device }}{{ item.partition }}"
        fstype: "{{ item.filesystem }}"
        opts: "{{ item.opts }}"
        state: mounted
      with_items: "{{ volumes }}"
