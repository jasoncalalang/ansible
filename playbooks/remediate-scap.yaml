---
- name: Remediate specific SCAP rules
  hosts: all
  become: yes
  vars:
    # Replace this with an actual hashed password for root.  
    # For example, use `mkpasswd --method=SHA-512 --rounds=5000` to generate one.
    root_hashed_password: "$6$sL5vOO5GJhr5aDuK$NGYKA6qu9N8nlz.uHSvE73f7VPPQAylhfDncqMtnZmsJblq.w9j7Ce6MW9RXIKKHrmA1h6vq6rYL9su1bXp70/"

    # The GRUB config file path may vary (e.g., /boot/efi/EFI/redhat/grub.cfg on UEFI systems).
    grub_cfg_path: "/boot/grub2/grub.cfg"

    # Secure password for grub2. It's best to handle this as a vaulted variable.
    grub2_plain_password: "P@ssw0rd@IBM"

    # Users allowed to SSH. Adjust as needed.
    allowed_ssh_users: "root user1"

  pre_tasks:
    - name: Ensure necessary packages are installed (for grub2 password hashing)
      package:
        name: grub2-pc
        state: present
      when: ansible_os_family == "RedHat"

  tasks:
    # 1. ensure_root_password_configured
    - name: Ensure root password is set
      user:
        name: root
        password: "{{ root_hashed_password }}"

    # 2. file_permissions_grub2_cfg
    - name: Set permissions on grub2.cfg
      file:
        path: "{{ grub_cfg_path }}"
        owner: root
        group: root
        mode: '0600'

    # 3. grub2_password
    # First, generate a hashed password using grub2-mkpasswd-pbkdf2.
    - name: Generate grub2 password hash
      command: "echo -e '{{ grub2_plain_password }}\\n{{ grub2_plain_password }}' | /usr/sbin/grub2-mkpasswd-pbkdf2"
      register: grub2pw
      # no_log: true

    - name: Configure grub2 user and password
      lineinfile:
        path: /boot/grub2/user.cfg
        regexp: '^GRUB2_PASSWORD='
        line: "GRUB2_PASSWORD={{ grub2pw.stdout_lines[-1] }}"
        create: yes
        owner: root
        group: root
        mode: '0600'

    # 4. sshd_limit_user_access
    # Limit SSH access to a subset of users by setting AllowUsers in sshd_config.
    - name: Limit SSH user access
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^\s*AllowUsers'
        line: "AllowUsers {{ allowed_ssh_users }}"
        create: yes
        backup: yes
      notify: Restart SSH

  handlers:
    - name: Restart SSH
      service:
        name: sshd
        state: restarted
